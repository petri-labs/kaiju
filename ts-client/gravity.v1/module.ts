// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgConfirmBatch } from "./types/gravity/v1/msgs";
import { MsgLogicCallExecutedClaim } from "./types/gravity/v1/msgs";
import { MsgCancelSendToEth } from "./types/gravity/v1/msgs";
import { MsgSubmitBadSignatureEvidence } from "./types/gravity/v1/msgs";
import { MsgSendToEth } from "./types/gravity/v1/msgs";
import { MsgERC20DeployedClaim } from "./types/gravity/v1/msgs";
import { MsgRequestBatch } from "./types/gravity/v1/msgs";
import { MsgValsetUpdatedClaim } from "./types/gravity/v1/msgs";
import { MsgSetOrchestratorAddress } from "./types/gravity/v1/msgs";
import { MsgBatchSendToEthClaim } from "./types/gravity/v1/msgs";
import { MsgConfirmLogicCall } from "./types/gravity/v1/msgs";
import { MsgValsetConfirm } from "./types/gravity/v1/msgs";
import { MsgSendToCosmosClaim } from "./types/gravity/v1/msgs";


export { MsgConfirmBatch, MsgLogicCallExecutedClaim, MsgCancelSendToEth, MsgSubmitBadSignatureEvidence, MsgSendToEth, MsgERC20DeployedClaim, MsgRequestBatch, MsgValsetUpdatedClaim, MsgSetOrchestratorAddress, MsgBatchSendToEthClaim, MsgConfirmLogicCall, MsgValsetConfirm, MsgSendToCosmosClaim };

type sendMsgConfirmBatchParams = {
  value: MsgConfirmBatch,
  fee?: StdFee,
  memo?: string
};

type sendMsgLogicCallExecutedClaimParams = {
  value: MsgLogicCallExecutedClaim,
  fee?: StdFee,
  memo?: string
};

type sendMsgCancelSendToEthParams = {
  value: MsgCancelSendToEth,
  fee?: StdFee,
  memo?: string
};

type sendMsgSubmitBadSignatureEvidenceParams = {
  value: MsgSubmitBadSignatureEvidence,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendToEthParams = {
  value: MsgSendToEth,
  fee?: StdFee,
  memo?: string
};

type sendMsgERC20DeployedClaimParams = {
  value: MsgERC20DeployedClaim,
  fee?: StdFee,
  memo?: string
};

type sendMsgRequestBatchParams = {
  value: MsgRequestBatch,
  fee?: StdFee,
  memo?: string
};

type sendMsgValsetUpdatedClaimParams = {
  value: MsgValsetUpdatedClaim,
  fee?: StdFee,
  memo?: string
};

type sendMsgSetOrchestratorAddressParams = {
  value: MsgSetOrchestratorAddress,
  fee?: StdFee,
  memo?: string
};

type sendMsgBatchSendToEthClaimParams = {
  value: MsgBatchSendToEthClaim,
  fee?: StdFee,
  memo?: string
};

type sendMsgConfirmLogicCallParams = {
  value: MsgConfirmLogicCall,
  fee?: StdFee,
  memo?: string
};

type sendMsgValsetConfirmParams = {
  value: MsgValsetConfirm,
  fee?: StdFee,
  memo?: string
};

type sendMsgSendToCosmosClaimParams = {
  value: MsgSendToCosmosClaim,
  fee?: StdFee,
  memo?: string
};


type msgConfirmBatchParams = {
  value: MsgConfirmBatch,
};

type msgLogicCallExecutedClaimParams = {
  value: MsgLogicCallExecutedClaim,
};

type msgCancelSendToEthParams = {
  value: MsgCancelSendToEth,
};

type msgSubmitBadSignatureEvidenceParams = {
  value: MsgSubmitBadSignatureEvidence,
};

type msgSendToEthParams = {
  value: MsgSendToEth,
};

type msgERC20DeployedClaimParams = {
  value: MsgERC20DeployedClaim,
};

type msgRequestBatchParams = {
  value: MsgRequestBatch,
};

type msgValsetUpdatedClaimParams = {
  value: MsgValsetUpdatedClaim,
};

type msgSetOrchestratorAddressParams = {
  value: MsgSetOrchestratorAddress,
};

type msgBatchSendToEthClaimParams = {
  value: MsgBatchSendToEthClaim,
};

type msgConfirmLogicCallParams = {
  value: MsgConfirmLogicCall,
};

type msgValsetConfirmParams = {
  value: MsgValsetConfirm,
};

type msgSendToCosmosClaimParams = {
  value: MsgSendToCosmosClaim,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgConfirmBatch({ value, fee, memo }: sendMsgConfirmBatchParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgConfirmBatch: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgConfirmBatch({ value: MsgConfirmBatch.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgConfirmBatch: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgLogicCallExecutedClaim({ value, fee, memo }: sendMsgLogicCallExecutedClaimParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgLogicCallExecutedClaim: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgLogicCallExecutedClaim({ value: MsgLogicCallExecutedClaim.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgLogicCallExecutedClaim: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCancelSendToEth({ value, fee, memo }: sendMsgCancelSendToEthParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCancelSendToEth: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCancelSendToEth({ value: MsgCancelSendToEth.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCancelSendToEth: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSubmitBadSignatureEvidence({ value, fee, memo }: sendMsgSubmitBadSignatureEvidenceParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSubmitBadSignatureEvidence: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSubmitBadSignatureEvidence({ value: MsgSubmitBadSignatureEvidence.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSubmitBadSignatureEvidence: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendToEth({ value, fee, memo }: sendMsgSendToEthParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendToEth: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendToEth({ value: MsgSendToEth.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendToEth: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgERC20DeployedClaim({ value, fee, memo }: sendMsgERC20DeployedClaimParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgERC20DeployedClaim: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgERC20DeployedClaim({ value: MsgERC20DeployedClaim.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgERC20DeployedClaim: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgRequestBatch({ value, fee, memo }: sendMsgRequestBatchParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgRequestBatch: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgRequestBatch({ value: MsgRequestBatch.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgRequestBatch: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgValsetUpdatedClaim({ value, fee, memo }: sendMsgValsetUpdatedClaimParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgValsetUpdatedClaim: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgValsetUpdatedClaim({ value: MsgValsetUpdatedClaim.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgValsetUpdatedClaim: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSetOrchestratorAddress({ value, fee, memo }: sendMsgSetOrchestratorAddressParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSetOrchestratorAddress: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSetOrchestratorAddress({ value: MsgSetOrchestratorAddress.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSetOrchestratorAddress: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgBatchSendToEthClaim({ value, fee, memo }: sendMsgBatchSendToEthClaimParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgBatchSendToEthClaim: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgBatchSendToEthClaim({ value: MsgBatchSendToEthClaim.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgBatchSendToEthClaim: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgConfirmLogicCall({ value, fee, memo }: sendMsgConfirmLogicCallParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgConfirmLogicCall: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgConfirmLogicCall({ value: MsgConfirmLogicCall.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgConfirmLogicCall: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgValsetConfirm({ value, fee, memo }: sendMsgValsetConfirmParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgValsetConfirm: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgValsetConfirm({ value: MsgValsetConfirm.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgValsetConfirm: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgSendToCosmosClaim({ value, fee, memo }: sendMsgSendToCosmosClaimParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgSendToCosmosClaim: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgSendToCosmosClaim({ value: MsgSendToCosmosClaim.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgSendToCosmosClaim: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgConfirmBatch({ value }: msgConfirmBatchParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgConfirmBatch", value: MsgConfirmBatch.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgConfirmBatch: Could not create message: ' + e.message)
			}
		},
		
		msgLogicCallExecutedClaim({ value }: msgLogicCallExecutedClaimParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgLogicCallExecutedClaim", value: MsgLogicCallExecutedClaim.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgLogicCallExecutedClaim: Could not create message: ' + e.message)
			}
		},
		
		msgCancelSendToEth({ value }: msgCancelSendToEthParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgCancelSendToEth", value: MsgCancelSendToEth.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCancelSendToEth: Could not create message: ' + e.message)
			}
		},
		
		msgSubmitBadSignatureEvidence({ value }: msgSubmitBadSignatureEvidenceParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgSubmitBadSignatureEvidence", value: MsgSubmitBadSignatureEvidence.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSubmitBadSignatureEvidence: Could not create message: ' + e.message)
			}
		},
		
		msgSendToEth({ value }: msgSendToEthParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgSendToEth", value: MsgSendToEth.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendToEth: Could not create message: ' + e.message)
			}
		},
		
		msgERC20DeployedClaim({ value }: msgERC20DeployedClaimParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgERC20DeployedClaim", value: MsgERC20DeployedClaim.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgERC20DeployedClaim: Could not create message: ' + e.message)
			}
		},
		
		msgRequestBatch({ value }: msgRequestBatchParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgRequestBatch", value: MsgRequestBatch.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgRequestBatch: Could not create message: ' + e.message)
			}
		},
		
		msgValsetUpdatedClaim({ value }: msgValsetUpdatedClaimParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgValsetUpdatedClaim", value: MsgValsetUpdatedClaim.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgValsetUpdatedClaim: Could not create message: ' + e.message)
			}
		},
		
		msgSetOrchestratorAddress({ value }: msgSetOrchestratorAddressParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgSetOrchestratorAddress", value: MsgSetOrchestratorAddress.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSetOrchestratorAddress: Could not create message: ' + e.message)
			}
		},
		
		msgBatchSendToEthClaim({ value }: msgBatchSendToEthClaimParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgBatchSendToEthClaim", value: MsgBatchSendToEthClaim.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgBatchSendToEthClaim: Could not create message: ' + e.message)
			}
		},
		
		msgConfirmLogicCall({ value }: msgConfirmLogicCallParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgConfirmLogicCall", value: MsgConfirmLogicCall.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgConfirmLogicCall: Could not create message: ' + e.message)
			}
		},
		
		msgValsetConfirm({ value }: msgValsetConfirmParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgValsetConfirm", value: MsgValsetConfirm.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgValsetConfirm: Could not create message: ' + e.message)
			}
		},
		
		msgSendToCosmosClaim({ value }: msgSendToCosmosClaimParams): EncodeObject {
			try {
				return { typeUrl: "/gravity.v1.MsgSendToCosmosClaim", value: MsgSendToCosmosClaim.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgSendToCosmosClaim: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			GravityV1: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;